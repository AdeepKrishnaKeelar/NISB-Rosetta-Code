using System;using System.Linq;using System.Security.Cryptography;using System.Text;namespace CoolAES{class Program{public static void A(string s) { Console.WriteLine(s); } public static void B(string s) { Console.Write(s); } public static string C() { return Console.ReadLine(); } public static AesCryptoServiceProvider D(byte[] K){if (K.Length < 32) { var a = K.ToList(); a.AddRange(new byte[32 - K.Length]); K = a.ToArray(); }return new AesCryptoServiceProvider{KeySize = 256,BlockSize = 128,Key = K,Padding = PaddingMode.None,Mode = CipherMode.ECB};}private static byte[] E(byte[] z,AesCryptoServiceProvider a){var dec = a.CreateDecryptor();byte[] resultArray = dec.TransformFinalBlock(z, 0, z.Length);return resultArray;}private static byte[] F(byte[] z,AesCryptoServiceProvider a){var enc = a.CreateEncryptor();var te = z.ToList();while (te.Count % 16 != 0) te.Add(0x00);z = te.ToArray();byte[] resultArray = enc.TransformFinalBlock(z, 0, z.Length);return resultArray;}public static byte[] G(string a){return Encoding.UTF8.GetBytes(a);} public static string H(byte[] z) { return Encoding.UTF8.GetString(z); } public static string I(byte[] z) { return Convert.ToBase64String(z); } public static byte[] J(string s) { return Convert.FromBase64String(s); }static void Main(string[] args) { A("1 to encrypt, 2 to decrypt"); B(">"); var a = C(); if (a == "1") { A("to encrypt:"); var t = C(); A("key:"); var k = C(); var e = D(G(k)); A(I(F(G(t), e))); } else { A("to decrypt:"); var t = C(); A("key:"); var k = C(); var e = D(G(k)); A(H(E(J(t), e))); } }}}